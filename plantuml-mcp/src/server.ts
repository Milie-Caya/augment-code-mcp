import { DiagramModule } from '@brainstack/diagram';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { z } from 'zod';

interface ServerConfig {
  plantUmlServerUrl?: string;
}

/**
 * Adds a footer annotation to PlantUML code
 * @param plantUmlCode The original PlantUML code
 * @returns The PlantUML code with footer annotation
 */
function addFooterAnnotation(plantUmlCode: string): string {
  // Check if the code already has a footer
  if (plantUmlCode.includes('footer')) {
    return plantUmlCode;
  }

  // Define a more prominent footer with styling
  const footerText = 'footer <b><font color="#4285F4">Generated by @brainstack/plantuml-mcp</font></b> | <font color="#AAAAAA">%date("yyyy-MM-dd HH:mm")</font>';

  // Find the position to insert the footer (before the @enduml tag)
  const endUmlIndex = plantUmlCode.lastIndexOf('@enduml');

  if (endUmlIndex === -1) {
    // If there's no @enduml tag, append both the footer and @enduml
    return `${plantUmlCode}\n\n' Add footer annotation\n${footerText}\n@enduml`;
  }

  // Insert the footer before the @enduml tag
  return `${plantUmlCode.substring(0, endUmlIndex)}\n\n' Add footer annotation\n${footerText}\n@enduml`;
}

export function createServer(config: ServerConfig = {}): McpServer {
  // Configure the DiagramModule if a custom PlantUML server URL is provided
  if (config.plantUmlServerUrl) {
    DiagramModule.setConfig({
      baseUrl: config.plantUmlServerUrl
    });
  }

  // Create an MCP server
  const server = new McpServer({
    name: 'PlantUML MCP',
    version: '1.0.0'
  });

  // Add the generateDiagram tool
  server.tool(
    'generateDiagram',
    {
      plantUmlCode: z.string().describe('The PlantUML code to generate a diagram from'),
      format: z.enum(['png', 'svg', 'txt']).default('png').describe('The format of the diagram (png, svg, or txt)')
    },
    async ({ plantUmlCode, format = 'png' }) => {
      try {
        // Add footer annotation to the PlantUML code
        const enhancedPlantUmlCode = addFooterAnnotation(plantUmlCode);

        let diagramUrl: string;

        // Generate the diagram URL based on the requested format
        switch (format.toLowerCase()) {
          case 'svg':
            diagramUrl = DiagramModule.generate_svg(enhancedPlantUmlCode);
            break;
          case 'txt':
            diagramUrl = DiagramModule.generate_txt(enhancedPlantUmlCode);
            break;
          case 'png':
          default:
            diagramUrl = DiagramModule.generate_png(enhancedPlantUmlCode);
            break;
        }

        return {
          content: [
            {
              type: 'text',
              text: JSON.stringify({
                url: diagramUrl,
                format: format.toLowerCase()
              })
            }
          ]
        };
      } catch (error) {
        console.error('Error generating diagram:', error);
        return {
          content: [
            {
              type: 'text',
              text: `Failed to generate diagram: ${error instanceof Error ? error.message : String(error)}`
            }
          ],
          isError: true
        };
      }
    }
  );

  return server;
}

// Function to start the server with stdio
export async function startServer(server: McpServer): Promise<void> {
  console.log('Starting PlantUML MCP server with stdio');

  // Create a stdio transport
  const transport = new StdioServerTransport();

  // Connect the server to the transport
  await server.connect(transport);

  console.log('PlantUML MCP server is ready to receive tool calls via stdio');
}
