import { createServer, startServer } from './server';
import { DiagramModule } from '@brainstack/diagram';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';

// Mock the SDK modules
jest.mock('@modelcontextprotocol/sdk/server/mcp.js', () => {
  return {
    McpServer: jest.fn().mockImplementation(() => {
      return {
        tool: jest.fn().mockReturnThis(),
        connect: jest.fn().mockResolvedValue(undefined)
      };
    })
  };
});

jest.mock('@modelcontextprotocol/sdk/server/stdio.js', () => {
  return {
    StdioServerTransport: jest.fn().mockImplementation(() => {
      return {};
    })
  };
});

// Mock the DiagramModule
jest.mock('@brainstack/diagram', () => ({
  DiagramModule: {
    setConfig: jest.fn(),
    generate_png: jest.fn().mockReturnValue('https://example.com/diagram.png'),
    generate_svg: jest.fn().mockReturnValue('https://example.com/diagram.svg'),
    generate_txt: jest.fn().mockReturnValue('https://example.com/diagram.txt')
  }
}));

describe('PlantUML MCP Server', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('createServer', () => {
    it('should create a server without custom PlantUML URL', () => {
      const server = createServer();
      expect(server).toBeDefined();
      expect(DiagramModule.setConfig).not.toHaveBeenCalled();
      expect(McpServer).toHaveBeenCalledWith({
        name: 'PlantUML MCP',
        version: '1.0.0'
      });
    });

    it('should create a server with custom PlantUML URL', () => {
      const customUrl = 'https://custom-plantuml.example.com';
      const server = createServer({ plantUmlServerUrl: customUrl });
      expect(server).toBeDefined();
      expect(DiagramModule.setConfig).toHaveBeenCalledWith({ baseUrl: customUrl });
    });

    it('should register the generateDiagram tool', () => {
      const server = createServer();
      expect(server.tool).toHaveBeenCalledWith(
        'generateDiagram',
        expect.any(Object),
        expect.any(Function)
      );
    });
  });

  describe('startServer', () => {
    it('should start the server with stdio transport', async () => {
      const mockServer = {
        connect: jest.fn().mockResolvedValue(undefined)
      };
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();

      await startServer(mockServer as unknown as McpServer);

      expect(StdioServerTransport).toHaveBeenCalled();
      expect(mockServer.connect).toHaveBeenCalled();
      expect(consoleSpy).toHaveBeenCalledWith('Starting PlantUML MCP server with stdio');
      expect(consoleSpy).toHaveBeenCalledWith('PlantUML MCP server is ready to receive tool calls via stdio');

      consoleSpy.mockRestore();
    });
  });

  describe('addFooterAnnotation', () => {
    it('should add footer to PlantUML code without existing footer', async () => {
      // Get access to the private addFooterAnnotation function
      const server = createServer();
      const toolHandler = (server.tool as jest.Mock).mock.calls[0][2];

      // Call the handler with simple PlantUML code
      await toolHandler({ plantUmlCode: '@startuml\nA -> B\n@enduml' });

      // Check that the footer was added correctly
      expect(DiagramModule.generate_png).toHaveBeenCalledWith(
        expect.stringContaining('footer <b><font color="#4285F4">Generated by @brainstack/plantuml-mcp</font></b>')
      );
    });

    it('should not add footer if one already exists', async () => {
      // Get access to the private addFooterAnnotation function
      const server = createServer();
      const toolHandler = (server.tool as jest.Mock).mock.calls[0][2];

      // Call the handler with PlantUML code that already has a footer
      const codeWithFooter = '@startuml\nA -> B\nfooter Existing Footer\n@enduml';
      await toolHandler({ plantUmlCode: codeWithFooter });

      // Check that the existing footer was preserved
      expect(DiagramModule.generate_png).toHaveBeenCalledWith(codeWithFooter);
    });

    it('should handle PlantUML code without @enduml tag', async () => {
      // Get access to the private addFooterAnnotation function
      const server = createServer();
      const toolHandler = (server.tool as jest.Mock).mock.calls[0][2];

      // Call the handler with PlantUML code without @enduml
      await toolHandler({ plantUmlCode: '@startuml\nA -> B' });

      // Check that both footer and @enduml were added
      expect(DiagramModule.generate_png).toHaveBeenCalledWith(
        expect.stringContaining('footer <b><font color="#4285F4">Generated by @brainstack/plantuml-mcp</font></b>')
      );
      expect(DiagramModule.generate_png).toHaveBeenCalledWith(
        expect.stringContaining('@enduml')
      );
    });
  });

  describe('generateDiagram tool handler', () => {
    it('should generate PNG diagram URL by default', async () => {
      // Get the tool handler
      const server = createServer();
      const toolHandler = (server.tool as jest.Mock).mock.calls[0][2];

      // Call the handler
      const result = await toolHandler({ plantUmlCode: '@startuml\nA -> B\n@enduml' });

      // Check the result
      expect(result).toEqual({
        content: [
          {
            type: 'text',
            text: JSON.stringify({
              url: 'https://example.com/diagram.png',
              format: 'png'
            })
          }
        ]
      });
      // Verify that the footer was added to the PlantUML code
      expect(DiagramModule.generate_png).toHaveBeenCalledWith(
        expect.stringContaining('footer <b><font color="#4285F4">Generated by @brainstack/plantuml-mcp</font></b>')
      );
    });

    it('should generate SVG diagram URL when format is svg', async () => {
      // Get the tool handler
      const server = createServer();
      const toolHandler = (server.tool as jest.Mock).mock.calls[0][2];

      // Call the handler
      const result = await toolHandler({
        plantUmlCode: '@startuml\nA -> B\n@enduml',
        format: 'svg'
      });

      // Check the result
      expect(result).toEqual({
        content: [
          {
            type: 'text',
            text: JSON.stringify({
              url: 'https://example.com/diagram.svg',
              format: 'svg'
            })
          }
        ]
      });
      // Verify that the footer was added to the PlantUML code
      expect(DiagramModule.generate_svg).toHaveBeenCalledWith(
        expect.stringContaining('footer <b><font color="#4285F4">Generated by @brainstack/plantuml-mcp</font></b>')
      );
    });

    it('should generate TXT diagram URL when format is txt', async () => {
      // Get the tool handler
      const server = createServer();
      const toolHandler = (server.tool as jest.Mock).mock.calls[0][2];

      // Call the handler
      const result = await toolHandler({
        plantUmlCode: '@startuml\nA -> B\n@enduml',
        format: 'txt'
      });

      // Check the result
      expect(result).toEqual({
        content: [
          {
            type: 'text',
            text: JSON.stringify({
              url: 'https://example.com/diagram.txt',
              format: 'txt'
            })
          }
        ]
      });
      // Verify that the footer was added to the PlantUML code
      expect(DiagramModule.generate_txt).toHaveBeenCalledWith(
        expect.stringContaining('footer <b><font color="#4285F4">Generated by @brainstack/plantuml-mcp</font></b>')
      );
    });

    it('should handle errors when generating diagram', async () => {
      // Mock the generate_png to throw an error
      (DiagramModule.generate_png as jest.Mock).mockImplementationOnce(() => {
        throw new Error('Failed to generate diagram');
      });

      // Get the tool handler
      const server = createServer();
      const toolHandler = (server.tool as jest.Mock).mock.calls[0][2];

      // Call the handler
      const result = await toolHandler({
        plantUmlCode: '@startuml\nA -> B\n@enduml'
      });

      // Check the result
      expect(result).toEqual({
        content: [
          {
            type: 'text',
            text: 'Failed to generate diagram: Failed to generate diagram'
          }
        ],
        isError: true
      });
    });
  });
});
